server:
  port: 8080 #端口
spring:
  application:
    name: api-gateway-server #服务名称
  redis:
    host: localhost
    pool: 6379
    database: 0
  #配置SpringCloudGateway的路由
  cloud: #配置SpringCloudGateway的路由
    gateway:
      routes:
      - id: order-service  #保持唯一
        #uri: http://127.0.0.1:9001 #目标微服务请求地址
        uri: lb://service-order  #lb://根据微服务名称从注册中心拉取服务请求路径
        predicates:
        #- Path=/product/** #路由条件 Path:路由匹配条件
        - Path=/order-service/** #将当前请求转发到http://127.0.0.1:9001/product/1
        filters: #配置路由过滤器
        - RewritePath=/order-service/(?<segment>.*),/$\{segment}  #路径重写的过滤器，在yml中$写成$\

      #配置路由：路由id，路由到微服务的URI，断言（判断条件）
      - id: product-service  #保持唯一
        #uri: http://127.0.0.1:9001 #目标微服务请求地址
        uri: lb://service-product  #lb://根据微服务名称从注册中心拉取服务请求路径
        predicates:
        #- Path=/product/** #路由条件 Path:路由匹配条件
        - Path=/product-service/** #将当前请求转发到http://127.0.0.1:9001/product/1
        filters: #配置路由过滤器
#        - name: RequestRateLimiter #使用限流过滤器，是spring cloud gateway提供的
#          args:
#            #使用SpEL从容器中获取对象
#            key-resolver: '#{@userKeyResolver}'
#            #令牌桶每秒填充平均速率
#            redis-rate-limiter.replenishRate: 1
#            #令牌桶的上限
#            redis-rate-limiter.burstCapacity: 3
        - RewritePath=/product-service/(?<segment>.*),/$\{segment}  #路径重写的过滤器，在yml中$写成$\
  #修改zipkin使用rabbitmq采集数据
  zipkin:
    #base-url: http://127.0.0.1:9411/  #server的请求地址
    sender:
      #type: web  #数据的传输方式，以http的形式向server端发送数据
      type: rabbit  #向rabbitmq中发送消息
  sleuth:
    sampler:
      probability: 1 #采样比理论为0.1，为了学习方便，全部采集
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
    listener: #这里配置了重试策略
      direct:
        retry:
          enabled: true
      simple:
        retry:
          enabled: true
#配置Eureka
eureka:
  client:
    service-url:
      defaultZone: http://localhost:9000/eureka/
  instance:
    prefer-ip-address: true #使用ip地址注册
logging:
  level:
    root: info
    org.springframework.web.servlet.DispatcherServlet: DEBUG
    org.springframework.cloud.sleuth: DEBUG